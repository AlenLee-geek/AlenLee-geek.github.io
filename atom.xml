<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AlenLee&#39;s blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://AlenLee-geek.github.io.git/"/>
  <updated>2018-04-15T14:42:37.598Z</updated>
  <id>https://AlenLee-geek.github.io.git/</id>
  
  <author>
    <name>AlenLee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>node-buffer</title>
    <link href="https://AlenLee-geek.github.io.git/2018/04/15/node-buffer/"/>
    <id>https://AlenLee-geek.github.io.git/2018/04/15/node-buffer/</id>
    <published>2018-04-15T14:22:16.000Z</published>
    <updated>2018-04-15T14:42:37.598Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Buffer-数据块"><a href="#Buffer-数据块" class="headerlink" title="Buffer(数据块)"></a>Buffer(数据块)</h4><blockquote><p>JS语言自身只有字符串数据类型，没有二进制数据类型，因此NodeJS提供了一个与String对等的全局构造函数Buffer来提供对二进制数据类型，除了可以读取文件得到Buffer的实例外，还能够直接构造，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var bin = new Buffer([]);//十六进制</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Buffer与字符串类似，除了可以用.length属性得到字节长度，还可以用【index】方式读取指定位置的字节，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin[0] = 0x67</span><br></pre></td></tr></table></figure></p></blockquote><p>Buffer与字符串能够相互转化，例如可以使用指定编码将二进制数据转化为字符串：<br>var str = bin.toString(‘utf-8’);<br>或者反过来，将字符串转换为指定编码下的二进制数据<br>var bin  = new Buffer(‘hello’,’utf-8’)<br>Buffer与字符串一个重要区别。字符串是只读的，并且字符串的任何修改得到都是一个新字符串，原字符串保持不变，至于Buffer，更像是可以做指针操作的C 语言数组。<br>.slice方法也不是返回一个新的BUffer，而更像是返回了指向原Buffer中间的摸个位置的指针，</p><blockquote><p>也因此，如果想要拷贝一份Buffer,得首先创建一个新的Buffer，并通过.copy方法把原Buffer只能中的数据复制过去。这个类似于申请一块新的内存，并把已有内存中的数据复制过去。<br>总之，Buffer将JS的数据处理能力从字符串扩展到了任意二进制数据。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Buffer-数据块&quot;&gt;&lt;a href=&quot;#Buffer-数据块&quot; class=&quot;headerlink&quot; title=&quot;Buffer(数据块)&quot;&gt;&lt;/a&gt;Buffer(数据块)&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;JS语言自身只有字符串数据类型，没有二进制数据
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>文件操作</title>
    <link href="https://AlenLee-geek.github.io.git/2018/04/15/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>https://AlenLee-geek.github.io.git/2018/04/15/文件操作/</id>
    <published>2018-04-15T08:28:56.000Z</published>
    <updated>2018-04-15T14:19:56.215Z</updated>
    
    <content type="html"><![CDATA[<h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><blockquote><p>让前端觉的获得神器的不是NodeJS能做网络编程，而是NodeJS能够操作文件，小至文件查找，大致代码编译，几乎没有一个前端工具不操作文件，几乎也只需要一些数据处理逻辑，再加上一些文件操作，就能购编写出大多数前端工具。本文将介绍预支相关的NodeJS内置模块。<br>NodeJS提供了基本的文件 操作API，但是像文件拷贝这种高级功能没有提供，因此我们先拿文件拷贝程序练手。与copy命令类似，我们的程序需要能接受源文件路径与目标文件路径两个参数。<br>小文件copy<br>我们使用NodeJS内置的fs模块简单实现这个程序如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">function copy(src,dst)&#123;</span><br><span class="line">  fs.writeFileSync(dst,fs.readFileSync(src));</span><br><span class="line">&#125;</span><br><span class="line">function main(argv)&#123;</span><br><span class="line">  copy(argv[0],argv[1]);</span><br><span class="line">&#125;</span><br><span class="line">main(process.argv.slice(2));</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>大文件拷贝<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">function copy(src,dst)&#123;</span><br><span class="line">  fs.createReadStream(src).pipe(fs.createWriteStream(dst));</span><br><span class="line">&#125;</span><br><span class="line">funciton main(argv)&#123;</span><br><span class="line">  copy(argv[0],argv[1]);</span><br><span class="line">&#125;</span><br><span class="line">main(process.argv.slice(2));</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;文件操作&quot;&gt;&lt;a href=&quot;#文件操作&quot; class=&quot;headerlink&quot; title=&quot;文件操作&quot;&gt;&lt;/a&gt;文件操作&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;让前端觉的获得神器的不是NodeJS能做网络编程，而是NodeJS能够操作文件，小至文件查找，大致
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>二进制模块</title>
    <link href="https://AlenLee-geek.github.io.git/2018/04/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%A8%A1%E5%9D%97/"/>
    <id>https://AlenLee-geek.github.io.git/2018/04/15/二进制模块/</id>
    <published>2018-04-15T05:46:48.000Z</published>
    <updated>2018-04-15T08:27:07.250Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二进制模块"><a href="#二进制模块" class="headerlink" title="二进制模块"></a>二进制模块</h4><blockquote><p>虽然一般我们使用JS编写模块，但NodeJS也支持使用C/C++编写二进制模块，编译好的二进制模块除了文件扩展名是.node外，和JS模块的使用方式相同。虽然二进制模块能使用操作系统提供的所有功能，拥有无限的潜能，但对于前端而言编写过于困难，并且难以夸平台使用，因此不在本教程的覆盖范围内。</p></blockquote><h4 id="代码的组织和部署"><a href="#代码的组织和部署" class="headerlink" title="代码的组织和部署"></a>代码的组织和部署</h4><blockquote><p>有经验的c程序员在编写一个新程序时首先从make文件写起。同样的，使用NodeJs编写程序前，为了有个良好的开端。首先需要准备好代码的目录结构和部署方式，就如同修房子要先搭脚手架。</p></blockquote><h4 id="模块路劲解析规则"><a href="#模块路劲解析规则" class="headerlink" title="模块路劲解析规则"></a>模块路劲解析规则</h4><blockquote><p>我们已经知道，require函数支持斜杠（/）或盘符（C:)开头的绝对路径，也支持./开头的相对路劲。但这两种路径之间奖励了强耦合关系，一旦某个模块文件的存放位置需要变更，使用该模块的其他的模块的代码也需要跟着调整，变的牵一发而动全身。因此，require函数支持第三种形式的路径，写法类似于foo/bar，并依次按照以下规则解析路径，直到找到模块位置。<br>1.内置模块<br>如果传递给require函数的是NodeJS内置模块名称，不做路径解析，直接返回模块的导出对象，例如require(‘fs’)。<br>2.node_modules目录<br>NodeJS定义了一个特殊的node_modules目录用于存放模块。例如某个模块的绝对路是/home/user/hello.js,在该模块中使用require(‘foo/bar’)方式加载模块时，则NodeJS依次尝试使用以下路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/home/user/node_modules/foo/bar</span><br><span class="line">/home/node_modules/foo/bar</span><br><span class="line">/node_modules/foo/bar</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.NODE_PATH环境变量<br>与PATH环境变量类型，NodeJS允许通过NODE_PATH环境变量来指定额外的模块搜索路径。NODE_PATH环境变量中包含已到多个目录路径，路径之间在Linux中使用：分隔，在window下使用；分隔。<br>当使用require(‘foo/bar’)的方式加载模块时，则NodeJS依次尝试一下路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NODE_PATH = /home/user/lib:/home/lib</span><br></pre></td></tr></table></figure></p></blockquote><p>当使用require(‘foo/bar’)的方式加载模块时，则NodeJS依次尝试一下路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home/user/lib/foo/bar</span><br><span class="line">/home/lib/foo/bar</span><br></pre></td></tr></table></figure></p><h4 id="包（package"><a href="#包（package" class="headerlink" title="包（package)"></a>包（package)</h4><blockquote><p>我们已经知道了JS模块的模块基本单位是单个JS文件，但复杂些往往由多个子模块组成。为了便于管理和使用，我们可以把由多个子模块组成的大模块称为包，并把所有子模块放在同一个目录里。<br>在组成一个包的所有子模块中，需要有一个入口模块，入口模块的导出对象被称为包的导出对象。例如有以下目录结构。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- /home/user/lib</span><br><span class="line">  -cat/</span><br><span class="line">       head.js</span><br><span class="line">       body.js</span><br><span class="line">       main.js</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>其中cat目录定义了一个包，其中包含了3个子模块。main.js作为入口模块，其内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var head = require(&apos;./head&apos;);</span><br><span class="line">var body = require(&apos;./body&apos;);</span><br><span class="line">exports.create = function(name)&#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    name:name,</span><br><span class="line">    head:head.create(),</span><br><span class="line">    body:body.create()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在其他模块里使用包的时候，需要加载包的入口模块，接着上例，使用require(‘/home/user/lib/cat/main’)能达到目的，但是入口模块名称出现在路径里看上去不是个好主意。因此我们需要做点额外的工作，让包使用起来更像是单个模块。<br>index.js<br>当模块的文件名是index.js，加载模块时可以使用模块所在的目录的路径代替模块文件路径，</p></blockquote><h4 id="命令行程序"><a href="#命令行程序" class="headerlink" title="命令行程序"></a>命令行程序</h4><blockquote><p>使用NodeJS编写的东西，要么是一个包，要么是一个命令行程序，而前者最终也会用于开发后者。因此我们在部署代码时需要一些技巧，让用户觉得自己是在使用一个命令行程序。<br>例如我们用NodeJS写了个程序，可以把命令行参数原样打印出来。该程序很简单，在主模块内实现了所有功能。并且写好后，</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;二进制模块&quot;&gt;&lt;a href=&quot;#二进制模块&quot; class=&quot;headerlink&quot; title=&quot;二进制模块&quot;&gt;&lt;/a&gt;二进制模块&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;虽然一般我们使用JS编写模块，但NodeJS也支持使用C/C++编写二进制模块，编译好的二
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>node</title>
    <link href="https://AlenLee-geek.github.io.git/2018/04/14/node/"/>
    <id>https://AlenLee-geek.github.io.git/2018/04/14/node/</id>
    <published>2018-04-14T13:37:45.000Z</published>
    <updated>2018-04-14T15:00:11.733Z</updated>
    
    <content type="html"><![CDATA[<h5 id="NodeJS基础"><a href="#NodeJS基础" class="headerlink" title="NodeJS基础"></a>NodeJS基础</h5><blockquote><p>JS是脚本语言，脚本语言都是需要一个额解析器才能运行。对于写在HTML页面里面的JS，浏览器充当了解析器的角色、而对于需要独立运行的JS，NodeJS就是一个解析器。<br>每一种解析器都是一个运行环境，不但允许JS定义各种数据结构们进行各种计算，还允许JS使用运行环境提供的内置队形和方法做一些事情。例如运行在浏览器中的JS的用途是是操作DOM，浏览器就提供了document之类的内置对象。而运行在NodeJS中JS的用途是操作磁盘文件或搭建HTTP服务器，NodeJS就相应提供了fs、http等内置对象。</p></blockquote><h5 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h5><blockquote><p>尽管存在，听说可以直接运行JS文件，但多数同学在接触新东西时，首先关心的是有啥用处，以及能带来什么价值。<br>NodeJS的作者说，他创造NodeJS的目的是为了实现高性能Web服务器。他首先看重的是事件机制和异步IO模型的优越性，而不是JS。但是他需要选择一种编程语言实现他的想法，这种编程语言不能自带IO功能，并且需要能良好支持事件机制，JS没有自带IO功能，天生就用于处理浏览器中的DOM事件，并且拥有一群程序员，因此就称为了天然的选择。<br>NodeJS在服务端活跃起来，出现了大批基于NodeJS的Web服务。而另一方面，NodeJS让前端众如获神器，终于可以让自己的能力覆盖范围跳出浏览器窗口，更大批的前端工具如雨后春笋。<br>因此，对于前端而言，虽然不是人人都要拿NodeJS写一个服务器程序，但简单可至使用 命令交互模式调试JS代码片段，复杂可至编写工具提升工作效率。<br>编写稍大一点的程序时一般都会讲代码模块化。在NodeJS中，一般将代码合理拆分到不同的JS文件中，每一个文件及时一个模块，而<strong>文件路径就是模块名</strong>。<br>在编写每一个模块时，都有require、exports、module三个预先定义好的变量可以使用。</p></blockquote><h5 id="require"><a href="#require" class="headerlink" title="require"></a>require</h5><blockquote><p>require 函数用于在当前模块中加载和使用别的模块，传入一个模块名，返回一个模块导出对象。模块名可使用相对路径（以./开头），或者绝对路径（/或者C:之类的盘符开头）。另外，模块名中的.js扩展名可以省略，</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var foo1 = require(&apos;./foo&apos;);</span><br><span class="line">var foo2 = require(&apos;./foo.js&apos;);</span><br><span class="line">var foo3 = require(&apos;./home/user/foo&apos;);</span><br><span class="line">var foo4 = require(&apos;./home/user/foo.js&apos;);</span><br></pre></td></tr></table></figure><blockquote><p>另外，可以使用以下方式加载和使用一个JSON文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var data = require(&apos;./data.json&apos;);</span><br></pre></td></tr></table></figure><h4 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h4><blockquote><p>exports对象是当前模块导出对象，用于导出导出模块公有方法和属性，别的模块通过require函数使用当前模块时得到的就是模块exports对象，以下例子中导出的一个公有方法。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.hello = function()&#123;</span><br><span class="line">  console.log(&apos;Hello World&apos;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="module"><a href="#module" class="headerlink" title="module"></a>module</h4><blockquote><p>通过module对象可以访问到当前模块的一些相关信息，但最多的用途是替换当前模块的导出对象。例如模块导出对象默认是一个普通 对象。如果想改为一个函数的话，可以使用以下方式。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function()&#123;</span><br><span class="line">  console.log(&apos;hello world&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码中，模块默认导出对象被替换为一个函数。</p><h4 id="模块初始化"><a href="#模块初始化" class="headerlink" title="模块初始化"></a>模块初始化</h4><blockquote><p>一个模块中的JS代码仅在模块第一次被使用时执行一次，并在执行过程中初始化模块的导出导出对象。之后，缓存起来的导出对象呗重复利用。<br>主模块<br>通过命令行参数传入给NodeJS已启动程序的模块被称为主模块。主模块负责调度组成整个程序的其他模块完成工作，例如通过以下命令启动程序时，main.js就是主程序。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var i = 0;</span><br><span class="line">function count()&#123;</span><br><span class="line">  return ++i;</span><br><span class="line">&#125;</span><br><span class="line">exports.count = count;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var counter1 = require(&apos;./util/counter&apos;);</span><br><span class="line">var counter2 = require(&apos;./util/counter&apos;);</span><br><span class="line">console.log(counter1.count());</span><br><span class="line">console.log(counter2.count());</span><br><span class="line">console.log(counter2.count());</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，counter.js并没有因为被require了两次而初始化两次。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;NodeJS基础&quot;&gt;&lt;a href=&quot;#NodeJS基础&quot; class=&quot;headerlink&quot; title=&quot;NodeJS基础&quot;&gt;&lt;/a&gt;NodeJS基础&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;JS是脚本语言，脚本语言都是需要一个额解析器才能运行。对于写在HT
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>List</title>
    <link href="https://AlenLee-geek.github.io.git/2018/04/11/List/"/>
    <id>https://AlenLee-geek.github.io.git/2018/04/11/List/</id>
    <published>2018-04-11T03:42:44.000Z</published>
    <updated>2018-04-14T13:38:29.185Z</updated>
    
    <content type="html"><![CDATA[<ol><li>列表的抽象数据类型定义<br>为了设计列表的抽象数据类型，需要给出列表的定义，包括列表应该拥有哪些属性，应该在列表上执行哪些操作。<br>列表是一组有序的数据，每个列表中的数据项称为元素。在JavaScript中，列表中元素可以是任意数据类型，<br>类表中可以保存多少元素并没有事先限定，实际使用时元素的数量受到程序内存的限制。</li><li>listSize保存列表中袁术的个数，可以在雷彪末尾append一个元素，也可以在一个给定元素后或列表的其实位置insert<br>一个元素，使用remove方法从列表中删除元素，使用clear方法清空列表中所有的元素。</li><li>toString()方法显示列表中所有的元素，使用getElement()方法显示当前元素。</li><li>append：给列表添加元素。</li><li>remove：从列表中删除元素。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;列表的抽象数据类型定义&lt;br&gt;为了设计列表的抽象数据类型，需要给出列表的定义，包括列表应该拥有哪些属性，应该在列表上执行哪些操作。&lt;br&gt;列表是一组有序的数据，每个列表中的数据项称为元素。在JavaScript中，列表中元素可以是任意数据类型，&lt;br&gt;类表中可以
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Array</title>
    <link href="https://AlenLee-geek.github.io.git/2018/04/11/Array/"/>
    <id>https://AlenLee-geek.github.io.git/2018/04/11/Array/</id>
    <published>2018-04-11T02:19:47.000Z</published>
    <updated>2018-04-11T04:00:51.873Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="在脚本语言里很常见的一个特性是，数组中的元素不必是通哟中数据类型，这一点和衡多编程语言不同"><a href="#在脚本语言里很常见的一个特性是，数组中的元素不必是通哟中数据类型，这一点和衡多编程语言不同" class="headerlink" title="在脚本语言里很常见的一个特性是，数组中的元素不必是通哟中数据类型，这一点和衡多编程语言不同"></a>在脚本语言里很常见的一个特性是，数组中的元素不必是通哟中数据类型，这一点和衡多编程语言不同</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var objects = [1,&apos;alen&apos;,true,null];</span><br></pre></td></tr></table></figure></blockquote><blockquote><h4 id="当把一个数组赋给另外一个数组时，只是为被赋值的数组增加了一个新的引用，当你通过原引用修改了数组的值，"><a href="#当把一个数组赋给另外一个数组时，只是为被赋值的数组增加了一个新的引用，当你通过原引用修改了数组的值，" class="headerlink" title="当把一个数组赋给另外一个数组时，只是为被赋值的数组增加了一个新的引用，当你通过原引用修改了数组的值，"></a>当把一个数组赋给另外一个数组时，只是为被赋值的数组增加了一个新的引用，当你通过原引用修改了数组的值，</h4><h4 id="另外一个引用也会感知到这个变化，"><a href="#另外一个引用也会感知到这个变化，" class="headerlink" title="另外一个引用也会感知到这个变化，"></a>另外一个引用也会感知到这个变化，</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var nums = [];</span><br><span class="line">for(var i = 0;i &lt; 10;i++)&#123;</span><br><span class="line">  nums[i] =i+1;</span><br><span class="line">&#125;</span><br><span class="line">var samenums = nums;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h4 id="这种行为被称为浅复制，新数组依然指向原来的数组。"><a href="#这种行为被称为浅复制，新数组依然指向原来的数组。" class="headerlink" title="这种行为被称为浅复制，新数组依然指向原来的数组。"></a>这种行为被称为浅复制，新数组依然指向原来的数组。</h4><h4 id="使用深复制，将原来数组的每一个元素都复制一份到新数组中，可以写一个深复制函数来做这件事。"><a href="#使用深复制，将原来数组的每一个元素都复制一份到新数组中，可以写一个深复制函数来做这件事。" class="headerlink" title="使用深复制，将原来数组的每一个元素都复制一份到新数组中，可以写一个深复制函数来做这件事。"></a>使用深复制，将原来数组的每一个元素都复制一份到新数组中，可以写一个深复制函数来做这件事。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function copy(arr1,arr2)&#123;</span><br><span class="line">  for(var i = 0; i &lt; arr1.length; ++i)&#123;</span><br><span class="line">    arr2[i] = arr1[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h4 id="查找元素indexof"><a href="#查找元素indexof" class="headerlink" title="查找元素indexof(),"></a>查找元素indexof(),</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var names = [&apos;alen&apos;,&apos;jhon&apos;,&apos;Clayton&apos;];</span><br><span class="line">putstr(&apos;Enter a name to search for: &apos;);</span><br><span class="line">var name = readline();</span><br><span class="line">var position = name.indexof(name);</span><br><span class="line">if( position &gt;= 0)&#123;</span><br><span class="line">  print(&apos;Found&apos; + name + &apos; at position &apos;+ position);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  print(name + &apos;not found in array.&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h4 id="迭代器方法"><a href="#迭代器方法" class="headerlink" title="迭代器方法"></a>迭代器方法</h4><p>最后一组方法是迭代器方法，这些方法对数组中的每个元素一个函数，可以返回一个值，一组值或者一个新数组<br>不生成新数组的迭代器方法<br>forEach(),该方法接受一个函数作为参数，对数组中的每个元素使用该函数、<br>every(),该方法接受一个返回值为布尔类型的函数，对数组中的每一个袁术使用该函数，如果对于所有的元素，该该函数均返回true.<br>some(),方法接受一个返回值为布尔类型的函数，只要有一个元素使得该函数返回true<br>reduce()方法接受一个函数，返回一个值，该方法会从一个累加值开始，不断对累加值和数组中的后续</p><h4 id="生成新数组的迭代器方法"><a href="#生成新数组的迭代器方法" class="headerlink" title="生成新数组的迭代器方法"></a>生成新数组的迭代器方法</h4><p>有两个迭代器方法可以生成新数组；map()和filter()</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h4 id=&quot;在脚本语言里很常见的一个特性是，数组中的元素不必是通哟中数据类型，这一点和衡多编程语言不同&quot;&gt;&lt;a href=&quot;#在脚本语言里很常见的一个特性是，数组中的元素不必是通哟中数据类型，这一点和衡多编程语言不同&quot; class=&quot;headerli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>立即执行函数</title>
    <link href="https://AlenLee-geek.github.io.git/2018/04/10/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
    <id>https://AlenLee-geek.github.io.git/2018/04/10/立即执行函数/</id>
    <published>2018-04-10T06:55:15.795Z</published>
    <updated>2018-04-10T08:57:49.678Z</updated>
    
    <content type="html"><![CDATA[<h3 id="javascript-立即执行函数"><a href="#javascript-立即执行函数" class="headerlink" title="javascript 立即执行函数"></a>javascript 立即执行函数</h3><blockquote><p>为了处于隔离的作用域，任何一个第三方库都存在大量的变量和函数，为避免变量污染（命名冲突），使用立即执行函数。<br>1.什么是立即执行函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  function test()&#123;//函数声明</span><br><span class="line">    console.log(&apos;test&apos;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   var test = function()&#123;//函数表达式</span><br><span class="line">    console.log(&apos;test&apos;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> function()&#123;</span><br><span class="line">  console.log(&apos;test&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="要想立即执行函数做到立即执行，"><a href="#要想立即执行函数做到立即执行，" class="headerlink" title="要想立即执行函数做到立即执行，"></a>要想立即执行函数做到立即执行，</h3><p>1.一是函数体后面要小括号。<br>2.二函数体必须是函数表达式而不能函数声明。<br>3.除了()运算符之外，！，+，-，=等运算符都能够立即执行的作用。这些运算符的作用就是将函数或函数声明转换为函数表达式。</p><h3 id="使用立即执行函数的好处"><a href="#使用立即执行函数的好处" class="headerlink" title="使用立即执行函数的好处"></a>使用立即执行函数的好处</h3><p>1.防止变量名称冲突。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;javascript-立即执行函数&quot;&gt;&lt;a href=&quot;#javascript-立即执行函数&quot; class=&quot;headerlink&quot; title=&quot;javascript 立即执行函数&quot;&gt;&lt;/a&gt;javascript 立即执行函数&lt;/h3&gt;&lt;blockquote&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://AlenLee-geek.github.io.git/2018/03/31/hello-world/"/>
    <id>https://AlenLee-geek.github.io.git/2018/03/31/hello-world/</id>
    <published>2018-03-31T06:16:53.179Z</published>
    <updated>2018-03-31T06:17:17.483Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
